# Single Dockerfile for combined deployment (alternative approach)
FROM node:18-alpine AS backend-builder

WORKDIR /app/backend
COPY mail-server-api/package*.json ./
RUN npm ci --only=production

FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend
COPY mail-server-frontend/package*.json ./
RUN npm ci
COPY mail-server-frontend/ .
ARG REACT_APP_API_URL=http://localhost:5000
ENV REACT_APP_API_URL=$REACT_APP_API_URL
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install nginx and curl
RUN apk add --no-cache nginx curl

# Create app user
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001

# Set up nginx
COPY mail-server-frontend/nginx.conf /etc/nginx/http.d/default.conf
RUN mkdir -p /run/nginx && \
    chown -R appuser:appuser /var/lib/nginx && \
    chown -R appuser:appuser /var/log/nginx && \
    chown -R appuser:appuser /run/nginx

# Set up backend
WORKDIR /app
COPY --from=backend-builder /app/backend/node_modules ./node_modules
COPY --chown=appuser:appuser mail-server-api/ .

# Set up frontend
COPY --from=frontend-builder /app/frontend/build /usr/share/nginx/html
RUN chown -R appuser:appuser /usr/share/nginx/html

# Create logs directory
RUN mkdir -p logs && chown appuser:appuser logs

# Create startup script
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'nginx &' >> /app/start.sh && \
    echo 'exec node server.js' >> /app/start.sh

RUN chmod +x /app/start.sh && chown appuser:appuser /app/start.sh

USER appuser

EXPOSE 3000 5000

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:5000/api/health || exit 1

CMD ["/app/start.sh"]
